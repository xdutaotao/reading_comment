#!/usr/bin/env ktap

# This script demonstrate how to access kernel data structure in ktap,
# it's based on ffi.cast function.
# Tested in x86-64.
#
# Below sk_buff structure definition should be retrived from vmlinux
# You should fetch your sk_buff type definition in your vmlinux.
#
# Note: In future, you don't have to declare sk_buff in this script.

ffi.cdef [[
typedef union ktime {
    long long int tv64;
} ktime_t;

typedef unsigned char __u8;
typedef short unsigned int __u16;
typedef short unsigned int __be16;
typedef unsigned int __u32;
typedef unsigned int __wsum;

typedef int dma_cookie_t;
typedef unsigned int sk_buff_data_t;

typedef struct { int counter; } atomic_t;

struct sk_buff {
    struct sk_buff *next;
    struct sk_buff *prev;
    ktime_t tstamp;
    struct sock *sk;
    struct net_device *dev;
    char cb[48];
    long unsigned int _skb_refdst;
    struct sec_path *sp;
    unsigned int len;
    unsigned int data_len;
    __u16 mac_len;
    __u16 hdr_len;
    union {
        __wsum csum;
	/* struct {...}; */
    };
    __u32 priority;
    __u8 local_df : 1;
    __u8 cloned : 1;
    __u8 ip_summed : 2;
    __u8 nohdr : 1;
    __u8 nfctinfo : 3;
    __u8 pkt_type : 3;
    __u8 fclone : 2;
    __u8 ipvs_property : 1;
    __u8 peeked : 1;
    __u8 nf_trace : 1;
    __be16 protocol;
    unsigned long *destructor; /* void (*destructor)(struct sk_buff *); */
    struct nf_conntrack *nfct;
    struct nf_bridge_info *nf_bridge;
    int skb_iif;
    __u32 rxhash;
    __be16 vlan_proto;
    __u16 vlan_tci;
    __u16 tc_index;
    __u16 tc_verd;
    __u16 queue_mapping;
    __u8 ndisc_nodetype : 2;
    __u8 pfmemalloc : 1;
    __u8 ooo_okay : 1;
    __u8 l4_rxhash : 1;
    __u8 wifi_acked_valid : 1;
    __u8 wifi_acked : 1;
    __u8 no_fcs : 1;
    __u8 head_frag : 1;
    __u8 encapsulation : 1;
    union {
        unsigned int napi_id;
        dma_cookie_t dma_cookie;
    };
    __u32 secmark;
    union {
        __u32 mark;
        __u32 dropcount;
        __u32 reserved_tailroom;
    };
    __be16 inner_protocol;
    __u16 inner_transport_header;
    __u16 inner_network_header;
    __u16 inner_mac_header;
    __u16 transport_header;
    __u16 network_header;
    __u16 mac_header;
    sk_buff_data_t tail;
    sk_buff_data_t end;
    unsigned char *head;
    unsigned char *data;
    unsigned int truesize;
    atomic_t users;
};
]]

trace net:netif_receive_skb {
	var skb = ffi.cast("struct sk_buff *", arg0)
	printf("skb len: %d, data_len: %d, iif: %d\n", skb.len, skb.data_len, skb.skb_iif)
}

